// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package jsonscheme generated by go-bindata.// sources:
// ../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorOcmV3SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x19\x5f\x6f\xdb\xbe\xf1\xdd\x9f\xe2\x80\x04\x90\xdd\x44\x76\xe2\xa2\x03\xaa\x97\xa0\x48\x5f\x7e\xd8\xba\x16\x6d\xb7\x87\xa5\x5e\xc0\x48\x27\x9b\x29\x45\x6a\x24\xed\xc4\x6b\xf3\xdd\x07\x92\xfa\x43\xc9\x92\x63\x39\xed\xc3\xf0\xeb\x43\x63\x1e\xef\x8e\xc7\xfb\x7f\xd4\x29\x4d\x22\x08\x56\x5a\xe7\x2a\x9a\xcd\x96\x44\x26\xc8\x51\x4e\x63\x26\xd6\xc9\x4c\xc5\x2b\xcc\x88\x9a\xc5\x22\xcb\x05\x47\xae\xc3\x04\x55\x2c\x69\xae\x85\x0c\x45\x9c\x85\x9b\xd7\x84\xe5\x2b\x72\x19\x8c\x4e\x1d\xae\xc7\xeb\x5e\x09\x1e\x3a\xe8\x54\xc8\xe5\x2c\x91\x24\xd5\xb3\xf9\xc5\xfc\x22\xbc\x9c\x17\xac\x83\x51\xc9\x90\x0a\x1e\x41\xf0\xf1\xfa\x03\x5c\x97\x87\xc1\xfb\xea\x30\xd8\xbc\x86\x92\xe2\x34\xc1\x54\x45\x23\x80\x0c\x35\x31\x7f\x01\xf4\x36\xc7\x08\x02\x71\x77\x8f\xb1\x0e\x2c\xa8\xc9\xb7\xba\x00\x6c\x50\x2a\x2a\xb8\x25\x4e\x88\x26\x0e\x5b\xe2\x7f\xd6\x54\x62\xe2\xd8\x01\x84\x10\x70\x92\x61\x50\x2f\x0b\x3a\x07\x21\x49\x42\x0d\x67\xc2\x3e\x49\x91\xa3\xd4\x14\x55\x04\x29\x61\x0a\xed\x7e\x5e\x43\x0b\x0e\x86\x5b\xf9\x1b\xe0\x54\x62\x1a\x41\x70\x32\xb3\x77\xa9\xd5\xfb\x77\xef\xcc\xe2\xc0\x5e\x22\x89\x8c\x3c\x62\xf2\x05\xb3\x0d\xca\x92\x88\x91\x3b\x64\xaa\x97\xc6\x6d\x97\xc8\xb9\x14\x1b\x9a\xa0\xec\x45\x2f\x11\x4a\x82\x58\x22\x31\xd7\xfe\x4a\xfd\xcb\x38\xe5\x2b\x2d\x29\x5f\x56\xc0\x54\xc8\x8c\xe8\x08\x12\xa2\x31\xd4\x34\xc3\x91\x35\x98\x5c\x62\xaf\xc5\x76\x95\x46\xd8\x52\x48\xaa\x57\x59\x7d\x58\x4e\xb4\x46\x69\x4c\xfa\xef\x1b\x12\xfe\x77\x61\xfe\xbb\x08\xdf\xce\x6e\xc3\xc5\xd9\x69\x25\xa7\xe0\x29\x5d\x46\xf0\x03\x9e\x0e\x30\x97\xaf\xb3\x42\x2c\x22\x25\xd9\x3a\x6e\x54\x63\x56\x09\xd4\xa5\xce\xa0\x64\xd1\x7b\xb1\x03\x9c\x8b\xb0\x35\xf6\x69\xa1\xe9\x3a\x1d\xda\xb6\xd4\x11\xfc\x78\xea\xf3\x1c\x4f\x69\x9b\x9b\x8b\xf0\xad\xa7\x2a\x45\x97\x9c\xf2\x65\x9b\x7f\x70\x27\x04\x43\xc2\x4b\x34\xcf\x72\x1d\x7a\xb0\xbb\xcf\x47\xc6\xc8\x58\xc6\xf3\xf4\x86\xc2\xdc\x8d\x1c\x93\x8c\x3c\xfe\x0d\xf9\x52\xaf\x22\x98\xbf\x79\x33\xea\xb4\x7b\xe8\x0c\xbf\x78\x35\xbe\x99\x2e\x5a\xa0\xc9\xab\x12\xf6\x63\x7e\xfe\x34\x9e\x35\xb6\x6f\x3b\x48\x6e\x0d\xcd\xc4\x68\x65\x04\x40\x13\xe4\x9a\xea\xed\x3b\xad\x25\xbd\x5b\x6b\xfc\x2b\x6e\x9d\xa8\x19\xe5\x95\x5c\x5d\x52\x99\xc3\xc7\x37\xe1\xed\x59\x29\x48\x09\x9c\x5c\x39\xd6\x8d\x98\x75\x3c\x4f\x40\x93\xef\xc8\x21\x95\x22\x03\x65\x37\x4c\xb6\x04\xc2\x13\x20\xc9\xfd\x5a\x69\x4c\x40\x0b\x20\x8c\x89\x07\x20\x1c\x44\xee\xf4\x0b\x0c\x49\x42\xf9\x12\x82\x4d\x70\x0e\x19\xb9\x37\x29\x99\xb3\xed\xb9\x25\xb5\xeb\x69\x46\x79\x01\x2d\xcf\x5a\x51\x05\x19\x12\xae\x40\xaf\x10\x52\x61\xb8\x1a\x26\x4e\xfd\x0a\x88\x44\x73\x94\xf1\x29\x9a\x34\xe5\x55\xa5\xc0\x97\xd3\xf9\xf4\xb5\xff\x3b\x4c\x85\x38\xbb\x23\xb2\x80\x6d\x7c\x84\x4d\x17\xc6\xe5\x74\x5e\xfe\xaa\xd0\x3c\xfc\xea\x67\x83\xcc\x57\xf6\x66\x71\x35\xbe\xf8\x79\x73\x19\xbe\x5d\x7c\x4b\x5e\x4d\xc6\x57\xd1\xb7\xa9\x0f\x98\x5c\x75\x83\xc2\xf1\xf8\x2a\xaa\x81\x3f\xbf\x25\xd6\x46\xef\xc2\x7f\x85\x0b\x13\x19\xe5\xef\x92\xe5\x81\xc8\x93\xf2\xc4\xb3\xb1\xbf\x71\x66\x99\x34\x20\x16\xb3\x88\xbe\x96\xe7\x77\xb9\xde\x73\xc9\x72\x6b\xe2\x48\x99\x4c\xd7\x0a\xc9\x2e\x27\x0e\xe0\xc9\x39\x61\x2e\x14\xd5\x42\x6e\xaf\x05\xd7\xf8\xa8\x87\x24\x2e\x83\xd5\x97\xa8\x2c\x87\x76\x22\xf1\x6e\x27\x62\xfa\xb9\xfb\x6c\xc2\xd8\xc7\xb4\x3e\x65\xa7\xd2\xb5\x88\xea\xcc\xd9\x96\xb0\x90\xf2\x8e\x28\xfc\x87\x64\x41\x9d\x01\x77\x84\x35\xff\x0a\x34\x1f\xd4\x99\x8f\xca\xaa\xe2\xe5\xae\x0f\x24\xcf\x1b\x79\x73\x2f\x29\x00\xf2\x75\x16\xc1\x4d\xb0\x96\xec\x13\xd1\xab\xe0\x1c\x02\xb5\x22\xf3\x37\x7f\x09\x13\xba\x44\xa5\x83\xc5\xa8\xc5\x67\x28\x67\xab\xdd\x25\x55\x5a\x6e\x0d\xf7\x8f\xd7\x7f\x54\xcb\x85\xd1\x3e\x89\x63\x54\xea\xc0\x7e\xc9\x68\xc6\x62\x99\x42\x5e\x90\xa2\x82\xb1\x59\xe1\xa3\x46\x6e\x0a\x8c\x9a\x3c\xe3\x26\x23\x00\x25\xd6\x32\xc6\xf7\x98\x52\x6e\xeb\xc2\x00\x5f\x33\x75\xaf\x5a\x14\x35\xad\x5a\x1b\x0e\xd5\xc2\xc9\x37\xa0\x7c\xee\x28\xf2\x90\xe8\x29\x90\xf1\x51\x4b\xf2\x47\x81\xd0\x5b\x12\x77\x38\xbc\xa8\xad\xdb\x1b\x59\x0e\x38\xa8\xf3\xf3\x7d\xa1\x03\xd9\x6d\x5b\xfb\x39\xef\xfc\x92\x63\x3c\xc0\x72\x2b\xa2\x56\xef\xca\xde\xad\xb6\xa7\x69\x09\x19\x55\xb6\x85\xdc\xdd\xb6\x5d\xcc\x91\xdd\x75\xe3\xc0\xbd\xbd\x52\xb7\x10\x07\xb4\x57\xdd\x18\x23\x00\xd3\xdc\x2a\x4d\xb2\xbc\xad\x24\xa7\xa3\x1e\x89\xf7\x31\x2d\x40\x47\x36\xd9\xa6\xa3\x23\x7a\x2d\x71\xa0\xd1\xc8\x1e\x8b\x98\x55\x86\x09\x25\x5f\xcb\xb0\x1b\x6e\xa3\x8e\x66\x7e\xa0\xb2\x1d\xa8\x92\xa3\xc6\x6a\xe6\xae\xaf\x2b\x74\x48\x2e\x81\x89\xd4\xb6\x3a\x95\x5a\xc0\x6b\xb6\xbb\xec\x59\x21\x1e\x9b\xaa\x5c\xc8\x54\xcb\x8a\xdf\x91\x7a\x7b\xb6\xfd\x77\xe7\xf5\x06\x73\x1d\xc1\x7e\xcf\xef\xdd\xb0\x83\xa6\xe1\x43\x81\xe7\x90\xd6\xd1\x7b\xc9\x1a\xa1\x60\xd3\x07\x47\xd3\xbf\xbe\x3f\x26\x89\xf4\xe9\xf4\x98\x01\xa9\x9d\x73\x3b\x70\x5e\x98\xd6\x07\x18\xa1\x52\x4b\xf5\xd0\xe1\xf4\xd3\x5f\x9b\x07\xd6\xc6\x96\x03\x4a\x2c\x8a\xb0\x3b\xe5\x97\xb8\xe1\x6f\x7b\xc0\x18\xec\xcc\xad\xdb\xed\x54\x49\x6f\x94\x87\xf6\x38\xdf\x71\x40\xdb\x61\x5d\x13\x23\xe3\xcf\x98\x1e\xd8\x3a\x11\x90\x98\xa2\x44\x1e\xa3\x9d\xdb\x60\x5c\xbf\x9e\x31\x11\x13\x36\x29\x9a\xa2\x63\x9f\x92\x4a\x1f\xfc\x82\x0c\x63\x2d\xfa\x9f\x6f\x7a\x9d\xf5\xc0\x5e\xc1\xce\x0a\xc5\x55\x8e\xbd\x7c\x75\xf7\x43\x9f\x42\x3a\x5d\xe9\xe5\xef\x6f\x1d\x0f\x0f\x87\xfa\xf1\xbe\x06\x12\x4e\x80\xc4\x7a\x4d\x18\xdb\x46\xf5\x19\xa1\x2d\x3c\x0f\x33\x50\x39\xc6\x94\x30\xe3\xa4\x5a\xd2\xd8\x88\xac\xfe\x5f\x7a\xce\x41\x0d\x65\x3b\x6c\x05\xc7\x7a\xa0\x83\xaa\x63\x8f\x20\xe0\x6b\xc6\x82\xc6\xc6\xfe\x54\x59\xc5\xf7\xf3\x23\xc4\xbe\x11\xa6\x64\xa3\x86\xbe\xf7\xc2\x89\xa5\xb7\x91\x5b\x73\x39\x2f\x5e\x52\xd6\x4a\x43\x46\x74\xbc\xf2\x1c\x5d\xed\x24\x64\x6f\x6a\xb6\x4b\xa3\x6f\x5d\x39\xb3\x05\x95\x2d\x77\xb7\xf7\xfe\x49\x66\x18\x97\x67\x5f\x9c\xc3\x1d\x9b\xba\x40\x38\x65\x3f\xab\xbf\x72\x90\xb6\xa6\x36\x23\xb4\x19\x74\x25\x27\xac\x9a\xcd\x7f\xc7\x8c\xf5\xbb\xe3\xa7\xf9\xc8\x3f\xf4\x75\xfa\xd7\xb4\xab\xc7\x8d\xaa\xa6\xf0\xee\x6b\x19\x9b\xe1\x6e\x53\x6d\x4a\x63\x6b\xeb\xb2\xe9\x8f\x05\xd7\xc8\xb5\x59\x7a\xa5\xa8\xf4\x5f\x7d\xec\x1d\x8b\x24\xf0\x62\x3f\x6d\x25\xb6\xda\x63\x8b\x12\xfa\xe2\x13\x2a\x4e\xed\x6e\xe9\x17\x70\xde\x95\x7e\xd4\x32\x92\xef\x59\x26\xc5\xe5\xf4\x9f\x75\x11\x0f\x21\xf8\x4e\x79\x52\xfc\xf4\xbf\xc6\x85\xce\x98\xc1\xa8\xa9\xf8\x9a\xbc\xf7\xbb\x41\x11\xc1\x10\x88\x38\x9b\xb6\x3e\x65\x56\x5f\x2a\xcf\xdd\xb6\x12\xa9\x7e\x20\x12\xeb\x0d\x30\x61\x6e\x64\xea\xe5\x1f\x0b\xae\x74\x04\x41\xd5\xb8\x7b\xf7\x29\x6f\xe0\x88\x77\x3e\x90\xb8\xab\xed\xbc\x64\x1e\xf6\xd9\x89\xf0\xad\x9f\x0d\x76\x42\xbe\xeb\x61\xd5\x14\xae\x78\x2d\x25\x72\xcd\xb6\xe7\xf0\x80\x20\x38\xdb\x16\x9f\x11\x6c\xf1\x12\x1c\x1b\x21\xd6\xf6\xce\xa2\xc9\xae\x66\xc1\xa3\x3e\x91\x55\xd4\x41\x6b\x1a\x3c\x8a\x5b\xf7\xdc\x14\xfc\x2f\x00\x00\xff\xff\xa2\xc7\x2b\xcd\xc4\x1e\x00\x00")

func ResourcesComponentDescriptorOcmV3SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorOcmV3SchemaYaml,
		"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml",
	)
}

func ResourcesComponentDescriptorOcmV3SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorOcmV3SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../../resources/component-descriptor-ocm-v3-schema.yaml": ResourcesComponentDescriptorOcmV3SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"..": {nil, map[string]*bintree{
					"..": {nil, map[string]*bintree{
						"..": {nil, map[string]*bintree{
							"..": {nil, map[string]*bintree{
								"..": {nil, map[string]*bintree{
									"resources": {nil, map[string]*bintree{
										"component-descriptor-ocm-v3-schema.yaml": {ResourcesComponentDescriptorOcmV3SchemaYaml, map[string]*bintree{}},
									}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
