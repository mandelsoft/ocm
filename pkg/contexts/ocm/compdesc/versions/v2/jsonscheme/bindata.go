// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package jsonscheme generated by go-bindata.// sources:
// ../../../../../../../resources/component-descriptor-v2-schema.yaml
package jsonscheme

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ResourcesComponentDescriptorV2SchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x4b\x6f\x1b\x37\x10\xbe\xeb\x57\x0c\x60\x03\x94\x62\xad\x64\xab\x48\x81\xe8\x62\x18\xc9\x25\x68\x13\x07\x49\xda\x43\x1d\xd5\xa0\x77\x47\x12\x5d\x2e\xb9\x25\x29\xc5\x6a\xe2\xff\x5e\x90\xdc\xf7\x43\xd6\xa3\x49\x51\xd4\x87\x44\x1c\x0e\x67\x86\xc3\x8f\xf3\xe0\x9e\xb2\x68\x0a\x64\x69\x4c\xa2\xa7\xe3\xf1\x82\xaa\x08\x05\xaa\x51\xc8\xe5\x2a\x1a\xeb\x70\x89\x31\xd5\xe3\x50\xc6\x89\x14\x28\x4c\x10\xa1\x0e\x15\x4b\x8c\x54\xc1\x7a\x42\x7a\xa7\x9e\xa3\x24\xe1\x5e\x4b\x11\x78\xea\x48\xaa\xc5\x38\x52\x74\x6e\xc6\x93\xf3\xc9\x79\x70\x31\x49\x05\x92\x5e\x26\x86\x49\x31\x05\x72\x9d\xa0\x80\x97\x99\x0e\x78\x23\x23\xe4\xb0\x9e\x40\xc6\x7d\x1a\xe1\x5c\x4f\x7b\x00\x31\x1a\x6a\xff\x07\x30\x9b\x04\xa7\x40\xe4\xdd\x3d\x86\x86\x38\x52\x55\x66\x6e\x32\x14\x26\xbb\xf5\x11\x35\xd4\x2f\x50\xf8\xe7\x8a\x29\x8c\xbc\x44\x80\x00\x88\xd7\xf8\x2b\x2a\xcd\xa4\xf0\x5c\x89\x92\x09\x2a\xc3\x50\x67\x7c\x15\xa6\x8c\x98\x9b\xa4\x8d\x62\x62\x41\x7a\xce\x5c\xb5\xc0\x4e\x7b\x9b\x82\x29\x5f\x48\xc5\xcc\x32\x2e\x84\x26\xd4\x18\x54\x76\x43\xbf\xdf\xd0\xe0\xaf\x99\xfd\xe7\x3c\x78\x31\xbe\x0d\x66\x67\xa7\x24\x65\x0b\xa5\x98\xb3\xc5\x14\xbe\xc0\xa3\xa3\xd0\x28\x62\xd6\x0d\x94\xbf\x2b\x74\xc0\x9c\x72\x8d\x3d\x00\x4e\xef\x90\x77\x5a\xd5\xe2\x14\x41\x63\x24\xc5\x70\x4d\xf9\x0a\xbb\xb6\x60\x79\x3b\x5d\xe2\x89\x6e\xfd\x14\xbe\x3c\x66\xe3\xba\x23\x4b\x7b\x5e\xdf\x9c\x07\x2f\x4a\x3b\xd5\x6c\x21\x98\x58\x34\x34\xdc\x49\xc9\x91\x8a\x8c\xad\xe4\x78\xfb\x77\xaa\x70\x3e\x05\x72\x32\x76\x40\x1a\xbb\x59\x77\x40\x39\x48\xde\xe6\x66\xb7\x98\x1c\xd3\x87\x9f\x51\x2c\xcc\x72\x0a\x93\xe7\xcf\x7b\xad\xc7\x12\xf8\x73\x99\x3d\xeb\xdf\x8c\x66\x35\xd2\xe0\x59\x46\xfb\x32\x19\x3e\xf6\xc7\x95\xe9\xdb\x96\x25\xb7\x76\xcd\xc0\xee\xba\x07\xc0\x22\x14\x86\x99\xcd\x95\x31\x8a\xdd\xad\x0c\xfe\x84\x1b\x6f\x6a\xcc\x44\x6e\x57\x9b\x55\x56\x79\xff\x26\xb8\x3d\xcb\x0c\xc9\x88\x83\x4b\x2f\x5a\x21\xa7\x0f\x18\x7d\xc0\x78\x8d\xca\xcb\x3c\x01\x43\xff\x40\x01\x73\x25\x63\xd0\x6e\xc2\x5e\x63\xa0\x22\x02\x1a\xdd\xaf\xb4\xc1\x08\x8c\x04\xca\xb9\xfc\x0c\x54\x80\x4c\x3c\xd2\x80\x23\x8d\x98\x58\x00\x59\x93\x21\xc4\xf4\x5e\xaa\x40\x0a\xbe\x19\xba\xa5\x6e\x3c\x8a\x99\x48\xa9\x99\xae\x25\xd3\x10\x23\x15\x1a\xcc\x12\x61\x2e\xad\x54\x2b\xc4\xbb\x5f\x03\x55\x68\x55\x59\xcc\xb0\xa8\x6a\xaf\xce\x0c\xbe\x18\x4d\x46\x3f\x94\x7f\x07\x73\x29\xcf\xee\xa8\x4a\x69\xeb\x32\xc3\xba\x8d\xe3\x62\x34\xc9\x7e\xe5\x6c\x25\xfe\xfc\x67\x65\x59\xd9\xd9\xeb\xd9\x65\xff\xfc\xeb\xcd\x45\xf0\x62\xf6\x29\x7a\x36\xe8\x5f\x4e\x3f\x8d\xca\x84\xc1\x65\x3b\x29\xe8\xf7\x2f\xa7\x05\xf1\xeb\xa7\xc8\x9d\xd1\x55\xf0\x5b\x30\xb3\xc8\xcf\x7e\x67\x22\x77\x64\x1e\x64\x1a\xcf\xfa\xe5\x89\x33\x27\xa4\x42\x71\x9c\xe9\xed\x6a\xc6\xaf\x06\xf4\x9e\x8a\x65\x1b\x7b\x8f\xb4\x0d\x44\xb5\x2b\xd7\x06\x62\x02\x8f\x1e\x84\x89\xd4\xcc\x48\xb5\x79\x29\x85\xc1\x07\xb3\x4f\x68\xb2\x5c\x5d\xa1\xc8\x49\xd8\x12\x9d\x65\xc8\xde\xb7\xeb\xa6\x9c\x5f\xcf\x0b\x2d\xb5\xbd\x34\x0c\x2e\x62\x63\xdd\xc2\xd4\xca\x3b\xaa\xf1\x17\xc5\x49\x11\xe1\x1a\xc6\xda\xbf\x94\xad\x4c\xea\x08\xa1\x3e\xe8\x97\x62\xd7\x1b\x9a\x24\x95\xb8\xb8\x75\x29\x00\x8a\x55\x3c\x85\x1b\xb2\x52\xfc\x1d\x35\x4b\x32\x04\xa2\x97\x74\xf2\xfc\xc7\x20\x62\x0b\xd4\x86\xcc\x7a\x35\x39\xfb\x4a\x76\xde\x5d\x30\x6d\xd4\xc6\x4a\xbf\x7e\xf9\x3a\x1f\xce\xac\xf7\x69\x18\xa2\xd6\x3b\x26\x73\xeb\x19\xc7\x05\x73\xa9\xd2\xa5\xa8\xa1\x6f\x47\xf8\x60\x50\xd8\x04\xa2\x07\x4f\xc0\xa4\x07\xb0\x60\x66\xb9\xba\xbb\xda\xae\x7b\x2b\xce\xdc\xd0\x42\xa0\x74\xa0\x8e\x32\x3f\x08\x87\x75\xb7\x79\x03\x73\xf7\xa7\x8a\x9e\x58\x6e\xf1\xb9\x9d\x23\x94\x71\xcc\xcc\xb6\xdb\x20\xa4\xc0\x63\xfc\x72\xe4\xbe\xdf\x4a\x81\x1e\x18\x5a\xae\x54\x88\xaf\x70\xce\x84\x2b\x62\xf6\x30\xc7\x16\x1f\xf9\x20\x2d\x2b\xf2\xb1\x95\x90\x0f\x3c\x84\x0e\xaf\x61\x1a\x35\x45\x6b\x80\x4b\x99\xf1\xc1\x28\xfa\x3a\x65\xe8\xac\x4a\x1a\x12\x48\x57\x7d\xd4\x88\x47\xa5\xac\x48\x76\x77\xbe\xab\x03\x75\x83\x89\x2a\x45\x37\xc5\x3e\x99\xc1\xb8\x12\xa5\x6a\xda\x9d\x94\x8c\xbd\x7c\xa9\xdb\x98\xfd\xbc\xc3\x9b\x8f\x33\x1f\x12\x0c\xf7\x38\xe0\x25\xd5\xcb\xab\xac\x48\x2e\x8e\x5d\xaa\x98\x72\xa6\xa9\x85\x4b\x73\xda\xd5\x9b\x1d\x47\x5d\x11\x58\x77\x85\x77\x57\x06\x8a\x56\x25\x5b\x97\xf8\x42\xb7\x9d\xa3\x07\x60\x58\x8c\xda\xd0\x38\xa9\x3b\xc1\xfb\xa0\xc3\xe2\x6d\x42\x53\x12\x6b\xc2\xb7\xc2\x00\x36\x8a\xc6\xd4\x4c\x21\xa2\x06\x03\xcb\xef\x2e\x1e\x5b\x08\x6a\x56\x0a\xf7\x3c\x14\xba\xc5\xe3\x76\x14\x63\xc4\xe8\xc7\xec\xf6\xed\xd4\xf5\xec\xe9\x4c\x4f\xca\xf5\x14\x5c\xd5\x2c\xf2\x71\x89\x9e\xc9\xa7\x12\x39\x77\x45\x67\xbe\x6d\x28\x35\x36\x6d\xe7\x95\x33\x1e\x1a\x91\x3c\xe4\xf3\x61\x2e\xcf\xd7\x1c\x5b\x7b\xb6\x5d\xc3\x54\xc5\x21\x5e\x5f\x67\xdc\x28\x6e\x60\xb9\xbb\x2a\xed\xb0\x65\x4d\x05\x23\xa4\x04\x38\x07\xe4\xce\x65\x15\xa8\xfb\x74\x83\xb6\x93\x78\x75\x48\x10\xc8\x7d\x7a\x80\x4b\x1a\xb1\xb4\x85\xe7\xc8\x70\xbd\x87\xd7\x73\x3f\xe4\x6f\x1f\xde\x21\xfb\xa4\xe0\xce\x9c\xf7\x94\x77\x6a\x76\x55\xca\xc9\xa3\x52\xcf\xde\xb0\x53\x98\xe6\xfc\xf2\xe6\xe1\xe0\x8c\x54\x87\x96\xf3\xb3\x56\xe1\xfb\xac\x4a\x7a\xb2\xdc\xa4\xb6\xa2\x42\x85\x22\x44\xd7\xeb\x42\xbf\x78\x00\xe3\x32\xa4\x7c\x90\x56\x29\xe4\xc0\xab\x9b\x81\xe7\x03\x72\x0c\x8d\x54\xfb\xa3\xec\x1f\x4d\xde\xe5\x97\x90\xf7\xd9\xce\x0f\xf5\x55\x2e\x69\xd7\xf7\xa4\x56\xe4\x05\x40\xd6\xe5\x57\xb8\xfd\x7d\xdc\xf2\xb6\xb3\x2b\xec\xb7\x15\x80\x70\x02\x34\x34\x2b\xca\xf9\x66\x5a\xe8\x08\x5c\x46\xf9\x3c\x06\x9d\x60\xc8\x28\xb7\x98\x36\x8a\x85\xd6\x64\xfd\x5f\xa9\x19\xbf\x41\x41\x58\x8f\x05\x52\xe0\xf5\xbc\xda\x1d\xa7\x5a\xc4\x8a\x73\x52\x99\xd8\x1e\x38\xf3\xa0\xf1\x74\xa3\xb0\xad\x97\xcc\xc4\xe8\x9d\x5f\x3f\x53\x54\xc2\x89\x5b\xef\xc2\x41\x21\x65\x98\x3e\x69\xad\xb4\x81\x98\x9a\x70\x59\xba\x0e\xba\xd1\x92\x34\xdb\x4a\xee\xca\xcb\x12\x29\xab\x98\xdb\x31\xfe\x3f\xe9\x54\x7c\xf0\x3e\x1a\x99\x5e\x4c\x91\x75\xbc\xb3\x77\x6e\x51\xdd\x51\x93\x21\x10\x7c\x30\xa8\x04\xe5\x79\x97\xfe\x3d\x3a\xa9\xae\x56\xca\x4f\x7e\xbb\x7b\x96\xe3\x77\xe7\x7c\xb0\x77\x02\xa8\x04\xfa\xfc\x7d\xa5\xf2\xc4\xa6\x4b\x93\x89\x92\x6b\x16\x15\x00\x0a\x80\x54\xee\x70\x35\xa9\xe4\xf9\x4c\x57\xe4\x57\x56\xfc\x6b\xa5\x52\xa8\xd0\x61\xf0\x63\x4b\xcb\x76\x93\x01\x71\x98\x1e\x5a\xf1\x24\xd7\x6c\xdf\x32\x48\xd7\xdd\xb6\x37\x26\xa9\xd8\x54\x81\xd3\x82\x90\xb6\x87\x53\x1b\x0f\xc3\x95\x52\x28\x0c\xdf\x0c\xe1\x33\x82\x14\x7c\x93\x7e\x26\x70\x31\x51\x8a\xcc\xcc\xec\x00\xbf\xff\xfb\x44\x7a\xea\x47\x07\x92\x5a\xe6\x21\xf5\x92\xa3\x00\xdd\xb1\xaa\x9a\x22\xeb\x55\xf3\xd1\x2a\x9a\x99\x94\xf4\x7a\xb5\x7b\x5e\xbe\xc4\x01\x90\x18\xfd\x37\xd4\xf2\x45\x23\xbd\xea\x35\x2a\xbe\xd5\x36\x3e\xbf\xf9\xc5\xb5\xc8\xd2\xb5\x71\x52\x6e\xbd\xab\x9d\x51\x69\xa3\x95\x4d\x76\x35\xad\xa4\xd6\x78\x1e\x24\xad\xbd\x63\x23\x7f\x07\x00\x00\xff\xff\xb3\xd0\x12\x68\x48\x1f\x00\x00")

func ResourcesComponentDescriptorV2SchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_ResourcesComponentDescriptorV2SchemaYaml,
		"../../../../../../../resources/component-descriptor-v2-schema.yaml",
	)
}

func ResourcesComponentDescriptorV2SchemaYaml() (*asset, error) {
	bytes, err := ResourcesComponentDescriptorV2SchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../../../../../resources/component-descriptor-v2-schema.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../../../../../resources/component-descriptor-v2-schema.yaml": ResourcesComponentDescriptorV2SchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"..": {nil, map[string]*bintree{
					"..": {nil, map[string]*bintree{
						"..": {nil, map[string]*bintree{
							"..": {nil, map[string]*bintree{
								"resources": {nil, map[string]*bintree{
									"component-descriptor-v2-schema.yaml": {ResourcesComponentDescriptorV2SchemaYaml, map[string]*bintree{}},
								}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
